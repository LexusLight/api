---
version: '3.5'
volumes:
  database_data:
  redis_data:

networks:
  traefik_proxy:
    external: true
  svc:
    driver: overlay

services:
  db:
    image: postgres:11
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_DB: ${DB_NAME:-osuserver}
    volumes:
      - database_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
    networks:
      - svc
    ports:
      - 127.0.0.1:5432:5432
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

  redis:
    image: redis:5-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/var/lib/redis/data
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "ping"]
    networks:
      - svc
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

  ayako:
    image: docker.pkg.github.com/deissh/rl/ayako:v1.1.14a
    restart: unless-stopped
    depends_on:
      - db
      - redis
    networks:
      - svc
      - traefik_proxy
    environment:
      CONFIG__SERVER__HOST: 0.0.0.0
      CONFIG__SERVER__PORT: 9000
      CONFIG__SERVER__ENABLEJOBS: 'true'
      CONFIG__DATABASE__DSN: postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db/${DB_NAME:-osuserver}?sslmode=disable
      CONFIG__MIRROR__BANCHO__USERNAME: somename
      CONFIG__MIRROR__BANCHO__PASSWORD: somepwd
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik_proxy
        - traefik.http.routers.ayako.rule=Host(`dev.risu.life`) && (PathPrefix(`/v2/beatmapsets`) || PathPrefix(`/v2/beatmaps`))
        - traefik.http.routers.ayako.entrypoints=https
        - traefik.http.routers.ayako.tls.certresolver=myresolver
        - traefik.http.services.ayako-svc.loadbalancer.server.port=9000
