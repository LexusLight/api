// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	entity "github.com/deissh/osu-lazer/ayako/entity"
	store "github.com/deissh/osu-lazer/ayako/store"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Beatmap mocks base method
func (m *MockStore) Beatmap() store.Beatmap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Beatmap")
	ret0, _ := ret[0].(store.Beatmap)
	return ret0
}

// Beatmap indicates an expected call of Beatmap
func (mr *MockStoreMockRecorder) Beatmap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Beatmap", reflect.TypeOf((*MockStore)(nil).Beatmap))
}

// BeatmapSet mocks base method
func (m *MockStore) BeatmapSet() store.BeatmapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeatmapSet")
	ret0, _ := ret[0].(store.BeatmapSet)
	return ret0
}

// BeatmapSet indicates an expected call of BeatmapSet
func (mr *MockStoreMockRecorder) BeatmapSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeatmapSet", reflect.TypeOf((*MockStore)(nil).BeatmapSet))
}

// MockBeatmap is a mock of Beatmap interface
type MockBeatmap struct {
	ctrl     *gomock.Controller
	recorder *MockBeatmapMockRecorder
}

// MockBeatmapMockRecorder is the mock recorder for MockBeatmap
type MockBeatmapMockRecorder struct {
	mock *MockBeatmap
}

// NewMockBeatmap creates a new mock instance
func NewMockBeatmap(ctrl *gomock.Controller) *MockBeatmap {
	mock := &MockBeatmap{ctrl: ctrl}
	mock.recorder = &MockBeatmapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBeatmap) EXPECT() *MockBeatmapMockRecorder {
	return m.recorder
}

// GetBeatmap mocks base method
func (m *MockBeatmap) GetBeatmap(id uint) (*entity.Beatmap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeatmap", id)
	ret0, _ := ret[0].(*entity.Beatmap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeatmap indicates an expected call of GetBeatmap
func (mr *MockBeatmapMockRecorder) GetBeatmap(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeatmap", reflect.TypeOf((*MockBeatmap)(nil).GetBeatmap), id)
}

// GetBeatmapsBySet mocks base method
func (m *MockBeatmap) GetBeatmapsBySet(beatmapsetId uint) []entity.Beatmap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeatmapsBySet", beatmapsetId)
	ret0, _ := ret[0].([]entity.Beatmap)
	return ret0
}

// GetBeatmapsBySet indicates an expected call of GetBeatmapsBySet
func (mr *MockBeatmapMockRecorder) GetBeatmapsBySet(beatmapsetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeatmapsBySet", reflect.TypeOf((*MockBeatmap)(nil).GetBeatmapsBySet), beatmapsetId)
}

// CreateBeatmap mocks base method
func (m *MockBeatmap) CreateBeatmap(from interface{}) (*entity.Beatmap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBeatmap", from)
	ret0, _ := ret[0].(*entity.Beatmap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBeatmap indicates an expected call of CreateBeatmap
func (mr *MockBeatmapMockRecorder) CreateBeatmap(from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBeatmap", reflect.TypeOf((*MockBeatmap)(nil).CreateBeatmap), from)
}

// CreateBeatmaps mocks base method
func (m *MockBeatmap) CreateBeatmaps(from interface{}) (*[]entity.Beatmap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBeatmaps", from)
	ret0, _ := ret[0].(*[]entity.Beatmap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBeatmaps indicates an expected call of CreateBeatmaps
func (mr *MockBeatmapMockRecorder) CreateBeatmaps(from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBeatmaps", reflect.TypeOf((*MockBeatmap)(nil).CreateBeatmaps), from)
}

// UpdateBeatmap mocks base method
func (m *MockBeatmap) UpdateBeatmap(id uint, from interface{}) (*entity.Beatmap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBeatmap", id, from)
	ret0, _ := ret[0].(*entity.Beatmap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBeatmap indicates an expected call of UpdateBeatmap
func (mr *MockBeatmapMockRecorder) UpdateBeatmap(id, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBeatmap", reflect.TypeOf((*MockBeatmap)(nil).UpdateBeatmap), id, from)
}

// DeleteBeatmap mocks base method
func (m *MockBeatmap) DeleteBeatmap(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBeatmap", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBeatmap indicates an expected call of DeleteBeatmap
func (mr *MockBeatmapMockRecorder) DeleteBeatmap(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBeatmap", reflect.TypeOf((*MockBeatmap)(nil).DeleteBeatmap), id)
}

// MockBeatmapSet is a mock of BeatmapSet interface
type MockBeatmapSet struct {
	ctrl     *gomock.Controller
	recorder *MockBeatmapSetMockRecorder
}

// MockBeatmapSetMockRecorder is the mock recorder for MockBeatmapSet
type MockBeatmapSetMockRecorder struct {
	mock *MockBeatmapSet
}

// NewMockBeatmapSet creates a new mock instance
func NewMockBeatmapSet(ctrl *gomock.Controller) *MockBeatmapSet {
	mock := &MockBeatmapSet{ctrl: ctrl}
	mock.recorder = &MockBeatmapSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBeatmapSet) EXPECT() *MockBeatmapSetMockRecorder {
	return m.recorder
}

// GetBeatmapSet mocks base method
func (m *MockBeatmapSet) GetBeatmapSet(id uint) (*entity.BeatmapSetFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeatmapSet", id)
	ret0, _ := ret[0].(*entity.BeatmapSetFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeatmapSet indicates an expected call of GetBeatmapSet
func (mr *MockBeatmapSetMockRecorder) GetBeatmapSet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeatmapSet", reflect.TypeOf((*MockBeatmapSet)(nil).GetBeatmapSet), id)
}

// GetAllBeatmapSets mocks base method
func (m *MockBeatmapSet) GetAllBeatmapSets(page, limit int) (*[]entity.BeatmapSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBeatmapSets", page, limit)
	ret0, _ := ret[0].(*[]entity.BeatmapSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBeatmapSets indicates an expected call of GetAllBeatmapSets
func (mr *MockBeatmapSetMockRecorder) GetAllBeatmapSets(page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBeatmapSets", reflect.TypeOf((*MockBeatmapSet)(nil).GetAllBeatmapSets), page, limit)
}

// ComputeBeatmapSet mocks base method
func (m *MockBeatmapSet) ComputeBeatmapSet(set entity.BeatmapSetFull) (*entity.BeatmapSetFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeBeatmapSet", set)
	ret0, _ := ret[0].(*entity.BeatmapSetFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeBeatmapSet indicates an expected call of ComputeBeatmapSet
func (mr *MockBeatmapSetMockRecorder) ComputeBeatmapSet(set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeBeatmapSet", reflect.TypeOf((*MockBeatmapSet)(nil).ComputeBeatmapSet), set)
}

// GetLatestBeatmapId mocks base method
func (m *MockBeatmapSet) GetLatestBeatmapId() (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBeatmapId")
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBeatmapId indicates an expected call of GetLatestBeatmapId
func (mr *MockBeatmapSetMockRecorder) GetLatestBeatmapId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBeatmapId", reflect.TypeOf((*MockBeatmapSet)(nil).GetLatestBeatmapId))
}

// GetBeatmapSetIdForUpdate mocks base method
func (m *MockBeatmapSet) GetBeatmapSetIdForUpdate(limit int) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeatmapSetIdForUpdate", limit)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeatmapSetIdForUpdate indicates an expected call of GetBeatmapSetIdForUpdate
func (mr *MockBeatmapSetMockRecorder) GetBeatmapSetIdForUpdate(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeatmapSetIdForUpdate", reflect.TypeOf((*MockBeatmapSet)(nil).GetBeatmapSetIdForUpdate), limit)
}

// CreateBeatmapSet mocks base method
func (m *MockBeatmapSet) CreateBeatmapSet(from interface{}) (*entity.BeatmapSetFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBeatmapSet", from)
	ret0, _ := ret[0].(*entity.BeatmapSetFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBeatmapSet indicates an expected call of CreateBeatmapSet
func (mr *MockBeatmapSetMockRecorder) CreateBeatmapSet(from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBeatmapSet", reflect.TypeOf((*MockBeatmapSet)(nil).CreateBeatmapSet), from)
}

// UpdateBeatmapSet mocks base method
func (m *MockBeatmapSet) UpdateBeatmapSet(id uint, from interface{}) (*entity.BeatmapSetFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBeatmapSet", id, from)
	ret0, _ := ret[0].(*entity.BeatmapSetFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBeatmapSet indicates an expected call of UpdateBeatmapSet
func (mr *MockBeatmapSetMockRecorder) UpdateBeatmapSet(id, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBeatmapSet", reflect.TypeOf((*MockBeatmapSet)(nil).UpdateBeatmapSet), id, from)
}

// DeleteBeatmapSet mocks base method
func (m *MockBeatmapSet) DeleteBeatmapSet(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBeatmapSet", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBeatmapSet indicates an expected call of DeleteBeatmapSet
func (mr *MockBeatmapSetMockRecorder) DeleteBeatmapSet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBeatmapSet", reflect.TypeOf((*MockBeatmapSet)(nil).DeleteBeatmapSet), id)
}

// Fetch mocks base method
func (m *MockBeatmapSet) Fetch(id uint) (*entity.BeatmapSetFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", id)
	ret0, _ := ret[0].(*entity.BeatmapSetFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockBeatmapSetMockRecorder) Fetch(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockBeatmapSet)(nil).Fetch), id)
}
