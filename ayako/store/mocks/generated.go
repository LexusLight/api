// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	entity "github.com/deissh/osu-lazer/ayako/entity"
	store "github.com/deissh/osu-lazer/ayako/store"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Beatmap mocks base method
func (m *MockStore) Beatmap() store.Beatmap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Beatmap")
	ret0, _ := ret[0].(store.Beatmap)
	return ret0
}

// Beatmap indicates an expected call of Beatmap
func (mr *MockStoreMockRecorder) Beatmap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Beatmap", reflect.TypeOf((*MockStore)(nil).Beatmap))
}

// BeatmapSet mocks base method
func (m *MockStore) BeatmapSet() store.BeatmapSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeatmapSet")
	ret0, _ := ret[0].(store.BeatmapSet)
	return ret0
}

// BeatmapSet indicates an expected call of BeatmapSet
func (mr *MockStoreMockRecorder) BeatmapSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeatmapSet", reflect.TypeOf((*MockStore)(nil).BeatmapSet))
}

// MockBeatmap is a mock of Beatmap interface
type MockBeatmap struct {
	ctrl     *gomock.Controller
	recorder *MockBeatmapMockRecorder
}

// MockBeatmapMockRecorder is the mock recorder for MockBeatmap
type MockBeatmapMockRecorder struct {
	mock *MockBeatmap
}

// NewMockBeatmap creates a new mock instance
func NewMockBeatmap(ctrl *gomock.Controller) *MockBeatmap {
	mock := &MockBeatmap{ctrl: ctrl}
	mock.recorder = &MockBeatmapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBeatmap) EXPECT() *MockBeatmapMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockBeatmap) Get(ctx context.Context, id uint) (*entity.SingleBeatmap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entity.SingleBeatmap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockBeatmapMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBeatmap)(nil).Get), ctx, id)
}

// GetBySetId mocks base method
func (m *MockBeatmap) GetBySetId(ctx context.Context, beatmapsetId uint) []entity.Beatmap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySetId", ctx, beatmapsetId)
	ret0, _ := ret[0].([]entity.Beatmap)
	return ret0
}

// GetBySetId indicates an expected call of GetBySetId
func (mr *MockBeatmapMockRecorder) GetBySetId(ctx, beatmapsetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySetId", reflect.TypeOf((*MockBeatmap)(nil).GetBySetId), ctx, beatmapsetId)
}

// Create mocks base method
func (m *MockBeatmap) Create(ctx context.Context, from interface{}) (*entity.Beatmap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, from)
	ret0, _ := ret[0].(*entity.Beatmap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockBeatmapMockRecorder) Create(ctx, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBeatmap)(nil).Create), ctx, from)
}

// CreateBatch mocks base method
func (m *MockBeatmap) CreateBatch(ctx context.Context, from interface{}) (*[]entity.Beatmap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", ctx, from)
	ret0, _ := ret[0].(*[]entity.Beatmap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatch indicates an expected call of CreateBatch
func (mr *MockBeatmapMockRecorder) CreateBatch(ctx, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockBeatmap)(nil).CreateBatch), ctx, from)
}

// Update mocks base method
func (m *MockBeatmap) Update(ctx context.Context, id uint, from interface{}) (*entity.Beatmap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, from)
	ret0, _ := ret[0].(*entity.Beatmap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockBeatmapMockRecorder) Update(ctx, id, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBeatmap)(nil).Update), ctx, id, from)
}

// Delete mocks base method
func (m *MockBeatmap) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockBeatmapMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBeatmap)(nil).Delete), ctx, id)
}

// MockBeatmapSet is a mock of BeatmapSet interface
type MockBeatmapSet struct {
	ctrl     *gomock.Controller
	recorder *MockBeatmapSetMockRecorder
}

// MockBeatmapSetMockRecorder is the mock recorder for MockBeatmapSet
type MockBeatmapSetMockRecorder struct {
	mock *MockBeatmapSet
}

// NewMockBeatmapSet creates a new mock instance
func NewMockBeatmapSet(ctrl *gomock.Controller) *MockBeatmapSet {
	mock := &MockBeatmapSet{ctrl: ctrl}
	mock.recorder = &MockBeatmapSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBeatmapSet) EXPECT() *MockBeatmapSetMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockBeatmapSet) Get(ctx context.Context, id uint) (*entity.BeatmapSetFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entity.BeatmapSetFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockBeatmapSetMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBeatmapSet)(nil).Get), ctx, id)
}

// GetAll mocks base method
func (m *MockBeatmapSet) GetAll(ctx context.Context, page, limit int) (*[]entity.BeatmapSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, page, limit)
	ret0, _ := ret[0].(*[]entity.BeatmapSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockBeatmapSetMockRecorder) GetAll(ctx, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBeatmapSet)(nil).GetAll), ctx, page, limit)
}

// ComputeFields mocks base method
func (m *MockBeatmapSet) ComputeFields(ctx context.Context, set entity.BeatmapSetFull) (*entity.BeatmapSetFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeFields", ctx, set)
	ret0, _ := ret[0].(*entity.BeatmapSetFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeFields indicates an expected call of ComputeFields
func (mr *MockBeatmapSetMockRecorder) ComputeFields(ctx, set interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeFields", reflect.TypeOf((*MockBeatmapSet)(nil).ComputeFields), ctx, set)
}

// SetFavourite mocks base method
func (m *MockBeatmapSet) SetFavourite(ctx context.Context, userId, id uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFavourite", ctx, userId, id)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFavourite indicates an expected call of SetFavourite
func (mr *MockBeatmapSetMockRecorder) SetFavourite(ctx, userId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFavourite", reflect.TypeOf((*MockBeatmapSet)(nil).SetFavourite), ctx, userId, id)
}

// SetUnFavourite mocks base method
func (m *MockBeatmapSet) SetUnFavourite(ctx context.Context, userId, id uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnFavourite", ctx, userId, id)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUnFavourite indicates an expected call of SetUnFavourite
func (mr *MockBeatmapSetMockRecorder) SetUnFavourite(ctx, userId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnFavourite", reflect.TypeOf((*MockBeatmapSet)(nil).SetUnFavourite), ctx, userId, id)
}

// GetLatestId mocks base method
func (m *MockBeatmapSet) GetLatestId(ctx context.Context) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestId", ctx)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestId indicates an expected call of GetLatestId
func (mr *MockBeatmapSetMockRecorder) GetLatestId(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestId", reflect.TypeOf((*MockBeatmapSet)(nil).GetLatestId), ctx)
}

// GetIdsForUpdate mocks base method
func (m *MockBeatmapSet) GetIdsForUpdate(ctx context.Context, limit int) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdsForUpdate", ctx, limit)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdsForUpdate indicates an expected call of GetIdsForUpdate
func (mr *MockBeatmapSetMockRecorder) GetIdsForUpdate(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdsForUpdate", reflect.TypeOf((*MockBeatmapSet)(nil).GetIdsForUpdate), ctx, limit)
}

// Create mocks base method
func (m *MockBeatmapSet) Create(ctx context.Context, from interface{}) (*entity.BeatmapSetFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, from)
	ret0, _ := ret[0].(*entity.BeatmapSetFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockBeatmapSetMockRecorder) Create(ctx, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBeatmapSet)(nil).Create), ctx, from)
}

// Update mocks base method
func (m *MockBeatmapSet) Update(ctx context.Context, id uint, from interface{}) (*entity.BeatmapSetFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, from)
	ret0, _ := ret[0].(*entity.BeatmapSetFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockBeatmapSetMockRecorder) Update(ctx, id, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBeatmapSet)(nil).Update), ctx, id, from)
}

// Delete mocks base method
func (m *MockBeatmapSet) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockBeatmapSetMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBeatmapSet)(nil).Delete), ctx, id)
}

// FetchFromBancho mocks base method
func (m *MockBeatmapSet) FetchFromBancho(ctx context.Context, id uint) (*entity.BeatmapSetFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFromBancho", ctx, id)
	ret0, _ := ret[0].(*entity.BeatmapSetFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFromBancho indicates an expected call of FetchFromBancho
func (mr *MockBeatmapSetMockRecorder) FetchFromBancho(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFromBancho", reflect.TypeOf((*MockBeatmapSet)(nil).FetchFromBancho), ctx, id)
}
