// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/deissh/osu-lazer/ayako/store (interfaces: Beatmap,BeatmapSet)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	entity "github.com/deissh/osu-lazer/ayako/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBeatmap is a mock of Beatmap interface
type MockBeatmap struct {
	ctrl     *gomock.Controller
	recorder *MockBeatmapMockRecorder
}

// MockBeatmapMockRecorder is the mock recorder for MockBeatmap
type MockBeatmapMockRecorder struct {
	mock *MockBeatmap
}

// NewMockBeatmap creates a new mock instance
func NewMockBeatmap(ctrl *gomock.Controller) *MockBeatmap {
	mock := &MockBeatmap{ctrl: ctrl}
	mock.recorder = &MockBeatmapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBeatmap) EXPECT() *MockBeatmapMockRecorder {
	return m.recorder
}

// CreateBeatmap mocks base method
func (m *MockBeatmap) CreateBeatmap(arg0 interface{}) (*entity.Beatmap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBeatmap", arg0)
	ret0, _ := ret[0].(*entity.Beatmap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBeatmap indicates an expected call of CreateBeatmap
func (mr *MockBeatmapMockRecorder) CreateBeatmap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBeatmap", reflect.TypeOf((*MockBeatmap)(nil).CreateBeatmap), arg0)
}

// DeleteBeatmap mocks base method
func (m *MockBeatmap) DeleteBeatmap(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBeatmap", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBeatmap indicates an expected call of DeleteBeatmap
func (mr *MockBeatmapMockRecorder) DeleteBeatmap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBeatmap", reflect.TypeOf((*MockBeatmap)(nil).DeleteBeatmap), arg0)
}

// GetBeatmap mocks base method
func (m *MockBeatmap) GetBeatmap(arg0 uint) (*entity.Beatmap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeatmap", arg0)
	ret0, _ := ret[0].(*entity.Beatmap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeatmap indicates an expected call of GetBeatmap
func (mr *MockBeatmapMockRecorder) GetBeatmap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeatmap", reflect.TypeOf((*MockBeatmap)(nil).GetBeatmap), arg0)
}

// UpdateBeatmap mocks base method
func (m *MockBeatmap) UpdateBeatmap(arg0 uint, arg1 interface{}) (*entity.Beatmap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBeatmap", arg0, arg1)
	ret0, _ := ret[0].(*entity.Beatmap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBeatmap indicates an expected call of UpdateBeatmap
func (mr *MockBeatmapMockRecorder) UpdateBeatmap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBeatmap", reflect.TypeOf((*MockBeatmap)(nil).UpdateBeatmap), arg0, arg1)
}

// MockBeatmapSet is a mock of BeatmapSet interface
type MockBeatmapSet struct {
	ctrl     *gomock.Controller
	recorder *MockBeatmapSetMockRecorder
}

// MockBeatmapSetMockRecorder is the mock recorder for MockBeatmapSet
type MockBeatmapSetMockRecorder struct {
	mock *MockBeatmapSet
}

// NewMockBeatmapSet creates a new mock instance
func NewMockBeatmapSet(ctrl *gomock.Controller) *MockBeatmapSet {
	mock := &MockBeatmapSet{ctrl: ctrl}
	mock.recorder = &MockBeatmapSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBeatmapSet) EXPECT() *MockBeatmapSetMockRecorder {
	return m.recorder
}

// CreateBeatmapSet mocks base method
func (m *MockBeatmapSet) CreateBeatmapSet(arg0 interface{}) (*entity.BeatmapSetFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBeatmapSet", arg0)
	ret0, _ := ret[0].(*entity.BeatmapSetFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBeatmapSet indicates an expected call of CreateBeatmapSet
func (mr *MockBeatmapSetMockRecorder) CreateBeatmapSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBeatmapSet", reflect.TypeOf((*MockBeatmapSet)(nil).CreateBeatmapSet), arg0)
}

// DeleteBeatmapSet mocks base method
func (m *MockBeatmapSet) DeleteBeatmapSet(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBeatmapSet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBeatmapSet indicates an expected call of DeleteBeatmapSet
func (mr *MockBeatmapSetMockRecorder) DeleteBeatmapSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBeatmapSet", reflect.TypeOf((*MockBeatmapSet)(nil).DeleteBeatmapSet), arg0)
}

// Fetch mocks base method
func (m *MockBeatmapSet) Fetch(arg0 uint, arg1 bool) (*entity.BeatmapSetFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*entity.BeatmapSetFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockBeatmapSetMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockBeatmapSet)(nil).Fetch), arg0, arg1)
}

// GetAllBeatmapSets mocks base method
func (m *MockBeatmapSet) GetAllBeatmapSets(arg0, arg1 int) (*[]entity.BeatmapSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBeatmapSets", arg0, arg1)
	ret0, _ := ret[0].(*[]entity.BeatmapSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBeatmapSets indicates an expected call of GetAllBeatmapSets
func (mr *MockBeatmapSetMockRecorder) GetAllBeatmapSets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBeatmapSets", reflect.TypeOf((*MockBeatmapSet)(nil).GetAllBeatmapSets), arg0, arg1)
}

// GetBeatmapSet mocks base method
func (m *MockBeatmapSet) GetBeatmapSet(arg0 uint) (*entity.BeatmapSetFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeatmapSet", arg0)
	ret0, _ := ret[0].(*entity.BeatmapSetFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeatmapSet indicates an expected call of GetBeatmapSet
func (mr *MockBeatmapSetMockRecorder) GetBeatmapSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeatmapSet", reflect.TypeOf((*MockBeatmapSet)(nil).GetBeatmapSet), arg0)
}

// UpdateBeatmapSet mocks base method
func (m *MockBeatmapSet) UpdateBeatmapSet(arg0 uint, arg1 interface{}) (*entity.BeatmapSetFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBeatmapSet", arg0, arg1)
	ret0, _ := ret[0].(*entity.BeatmapSetFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBeatmapSet indicates an expected call of UpdateBeatmapSet
func (mr *MockBeatmapSetMockRecorder) UpdateBeatmapSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBeatmapSet", reflect.TypeOf((*MockBeatmapSet)(nil).UpdateBeatmapSet), arg0, arg1)
}
